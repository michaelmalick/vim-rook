## Rook test suite

Execute (Setup test environment):

  xmap gl  <Plug>RookSend
  nmap gl  <Plug>RookSend
  nmap gll <Plug>RookSendLine

  xmap af <Plug>RookRFunctionVisual
  omap af <Plug>RookRFunctionPending
  xmap ic <Plug>RookRmdChunkVisualI
  omap ic <Plug>RookRmdChunkPendingI
  xmap ac <Plug>RookRmdChunkVisualA
  omap ac <Plug>RookRmdChunkPendingA

  let g:rook_tmp_file = './rook.tmp'


## Basic tests ---------------------------------------------
Execute (Autoload functions should not exist):
  Assert !exists('*rook#rstudio_folding')
  Assert !exists('*rook#fold_expr')

Execute (Target dictionary should be empty):
  Assert empty(g:rook_attach_dict)

Execute (Target ID should not exist):
  Assert !exists('b:rook_target_id')

Execute (Help type should be html):
  Assert g:rook_help_type ==# 'html'

Execute (Temp file shouldn't exist):
  Assert !filereadable(g:rook_tmp_file)


## Attach --------------------------------------------------
Execute (Rattach: empty input):
  AssertThrows :Rattach
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: non-existing buffer):
  silent Rattach test
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: non-terminal, non-R buffer):
  silent edit test
  silent Rattach test
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: non-terminal, R buffer):
  silent edit test1.R
  silent Rattach test1.R
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: terminal buffer (and Rdetach!)):
  let s_winid = win_getid()
  exe 'belowright new'
  exe 'enew'
  if has('nvim')
    call termopen('R')
  else
    call term_start('R', {'curwin':1})
  endif
  let t_bufname = bufname('%')
  call win_gotoid(s_winid)
  silent edit test1.R
  exe 'Rattach '.t_bufname
  Assert exists('b:rook_target_id')
  Assert !empty(g:rook_attach_dict)
  AssertEqual 1, len(g:rook_attach_dict)
  silent Rdetach!
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: multiple attach to same R file):
  let s_winid = win_getid()
  exe 'belowright new'
  exe 'enew'
  if has('nvim')
    call termopen('R')
  else
    call term_start('R', {'curwin':1})
  endif
  let t_bufname1 = bufname('%')
  call win_gotoid(s_winid)
  silent edit test1.R
  exe 'Rattach '.t_bufname1
  let t_id1 = b:rook_target_id
  Assert exists('b:rook_target_id')
  Assert !empty(g:rook_attach_dict)
  AssertEqual 1, len(g:rook_attach_dict)
  let s_winid = win_getid()
  exe 'belowright new'
  exe 'enew'
  if has('nvim')
    call termopen('R')
  else
    call term_start('R', {'curwin':1})
  endif
  let t_bufname2 = bufname('%')
  call win_gotoid(s_winid)
  exe 'Rattach '.t_bufname2
  let t_id2 = b:rook_target_id
  AssertEqual 1, len(g:rook_attach_dict)
  AssertNotEqual t_id2, t_id1
  silent Rdetach!
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)
  exe 'bd!'.bufnr(t_bufname1)

Execute (Rattach: auto-attach new R file):
  let s_winid = win_getid()
  exe 'belowright new'
  exe 'enew'
  if has('nvim')
    call termopen('R')
  else
    call term_start('R', {'curwin':1})
  endif
  let t_bufname = bufname('%')
  call win_gotoid(s_winid)
  silent edit test1.R
  exe 'Rattach '.t_bufname
  let t_id = b:rook_target_id
  silent edit test2.R
  AssertEqual t_id, b:rook_target_id
  AssertEqual 2, len(g:rook_attach_dict)
  silent Rdetach
  silent edit test1.R
  silent Rdetach!
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rattach: no auto-attach new R file):
  let g:rook_auto_attach = 0
  let s_winid = win_getid()
  exe 'belowright new'
  exe 'enew'
  if has('nvim')
    call termopen('R')
  else
    call term_start('R', {'curwin':1})
  endif
  let t_bufname = bufname('%')
  call win_gotoid(s_winid)
  silent edit test1.R
  exe 'Rattach '.t_bufname
  silent edit test2.R
  Assert !exists('b:rook_target_id')
  AssertEqual 1, len(g:rook_attach_dict)
  silent edit test1.R
  silent Rdetach!
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)
  let g:rook_auto_attach = 1



## Rstart --------------------------------------------------
Execute (Rstart: input doesn't create new window):
  silent call rook#rstart(' ')
  Assert !exists('b:rook_target_id')
  Assert empty(g:rook_attach_dict)

Execute (Rstart: create R target buffer):
  call rook#rstart('belowright vnew')
  Assert exists('b:rook_target_id')
  Assert !empty(g:rook_attach_dict)
  silent Rdetach!

Execute (Rstart: create R target buffer for R file):
  silent edit test1.R
  call rook#rstart('belowright vnew')
  Assert exists('b:rook_target_id')
  Assert !empty(g:rook_attach_dict)
  silent edit test1.R
  silent Rdetach!



## Rwrite --------------------------------------------------
Execute (Rwrite: no target attached):
  silent edit vader.R
  silent Rwrite
  Assert !filereadable(g:rook_tmp_file)

Execute (Rwrite: send current line):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  silent Rwrite
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file

Execute (Rwrite: send range):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  silent 1,3Rwrite
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  normal! G
  let line2 = getline(line('.'))
  AssertEqual 'ls()', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file

Execute (Rwrite: send visual range):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  normal! vjj$
  silent '<,'>Rwrite
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  normal! G
  let line2 = getline(line('.'))
  AssertEqual 'ls()', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file



## Rview ---------------------------------------------------
Execute (Rview: no target attached):
  silent edit vader.R
  let c_list = g:rook_rview_complete_list
  silent Rview
  Assert !exists('g:rook_rview_fun')
  AssertEqual c_list, g:rook_rview_complete_list

Execute (Rview: target attached but no previous function):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  let c_list = g:rook_rview_complete_list
  silent Rview
  Assert !exists('g:rook_rview_fun')
  AssertEqual c_list, g:rook_rview_complete_list
  silent edit vader.R
  silent Rdetach!

Execute (Rview: function arg):
  silent edit vader.R
  silent Rview str
  Assert exists('g:rook_rview_fun')
  AssertEqual 'str', g:rook_rview_fun
  AssertEqual 'str', g:rook_rview_complete_list[0]



## Rargs ---------------------------------------------------
Execute (Rargs: no previous function):
  silent edit vader.R
  silent Rargs
  Assert !exists('g:rook_rargs_fun')

Execute (Rargs: target attached w/ input function):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  silent Rargs plot
  AssertEqual 'plot', g:rook_rargs_fun
  silent edit vader.R
  silent Rdetach!

Execute (Rargs: target attached w/o input function):
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  normal! 2j
  silent Rargs
  AssertEqual 'ls', g:rook_rargs_fun
  normal! gg^
  silent edit vader.R
  silent Rdetach!



## Sending w/ gl -------------------------------------------
Execute (gl: no target attached):
  silent edit vader.R
  normal glap
  Assert !filereadable(g:rook_tmp_file)

Execute (gl: send line):
  Assert !filereadable(g:rook_tmp_file)
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  let s_pos = getpos('.')
  normal gll
  let e_pos = getpos('.')
  AssertEqual s_pos, e_pos
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  normal! G
  let line2 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file

Execute (gl: send word):
  Assert !filereadable(g:rook_tmp_file)
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  let s_pos = getpos('.')
  normal gliw
  let e_pos = getpos('.')
  AssertEqual s_pos, e_pos
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '##', line1
  normal! G
  let line2 = getline(line('.'))
  AssertEqual '##', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file

Execute (gl: send paragraph):
  Assert !filereadable(g:rook_tmp_file)
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  let s_pos = getpos('.')
  normal glap
  let e_pos = getpos('.')
  AssertEqual s_pos, e_pos
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  normal! 2j
  let line2 = getline(line('.'))
  AssertEqual 'ls()', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file

Execute (gl: visual selection):
  Assert !filereadable(g:rook_tmp_file)
  silent edit vader.R
  call rook#rstart('belowright vnew')
  silent edit vader.R
  normal V2jgl
  Assert filereadable(g:rook_tmp_file)
  exe 'edit '.g:rook_tmp_file
  let line1 = getline(line('.'))
  AssertEqual '## Test file for vader.vim', line1
  normal! 2j
  let line2 = getline(line('.'))
  AssertEqual 'ls()', line2
  silent edit vader.R
  silent Rdetach!
  call delete(g:rook_tmp_file)
  exe 'bw!'.g:rook_tmp_file



## Text object: function -----------------------------------
Given:
  x <- function() {
      return(10)
  }
Do (Operator change a function):
  cafm
Expect:
  m
Do (Visual change a function):
  vafdim
Expect:
  m

Given:
  x <- function(y) {
      y <- lapply(y, function(z) {
               mean(z)
           })
  }
Do (Operator change a function nested):
  2jcafm
Expect:
  m

Given:
  x <- 10
Do (Not in a function):
  daf
Expect:
  x <- 10



## Text object: rmd chunk ----------------------------------
Given:
  ```{r}
  x <- function() {
      return(10)
  }
  ```
Do (Operator delete inner chunk):
  jdic
Expect:
  ```{r}
  ```
Do (Visual delete inner chunk):
  jvicd
Expect:
  ```{r}
  ```
Do (Operator change a chunk):
  jcacm
Expect:
  m
Do (Visual change a chunk):
  jvaccm
Expect:
  m

Given:
  x <- 10
Do (Not in a chunk):
  dac
Expect:
  x <- 10
Do (Not in inner chunk):
  dic
Expect:
  x <- 10
