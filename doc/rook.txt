*rook.txt* Evaluate R code in a vim/neovim terminal or a tmux pane


==============================================================================
VIM-ROOK                                                            *vim-rook*

Lightweight plugin for evaluating R code in a vim/neovim terminal or tmux
pane.


==============================================================================
COMMANDS                                                       *rook-commands*

:Rattach [args]     Specify a target tmux pane or vim/neovim terminal buffer to
                    evaluate code in. For tmux, the format of [args] needs to
                    be: `session_name:window_name.pane_index`  (e.g.,
                    `sess:win.1`). For a terminal buffer, [args] should be a
                    buffer name. Tab completion can be used to specify the
                    target for both vim/neovim and tmux targets. When using
                    neovim or vim with the 'terminal' feature, `Rattach`
                    assumes the target is a vim/neovim terminal buffer (even
                    if vim is running inside tmux). When using vim without
                    the 'terminal' feature, `Rattach` assumes the target is a
                    tmux pane. This behaviour can be changed by setting the
                    `g:rook_target_type` variable (see |rook-configurations|).

                    When the `Rattach` command is called, the attached target
                    is set to be buffer local, meaning that a different target
                    pane/terminal can be specified for each R filetype buffer.
                    If only one unique target pane/terminal has been set, all
                    R filetype buffers will automatically be set to send to
                    this target (this inheritance occurs for vim buffers with
                    file extensions `*.r,*.R,*.rmd,*.Rmd,*.rnw,*.Rnw`). This
                    auto-attaching can be turned off by setting the
                    `g:rook_auto_attach` variable (see |rook-configurations|).
                    If more than one unique target has been set (i.e.,
                    `Rattach` has been called at least twice with two
                    different targets specified) then targets for all new R
                    filetype buffers will need to be set manually by calling
                    `Rattach`. The selected target for a buffer is remembered
                    throughout the vim/neovim editing session and the buffer
                    target can be changed by calling `Rattach` again. 
                    
:Rwrite [args]      Given an argument, take the text given in [args] and send
                    it to the target R console, e.g., `:Rwrite ls()` will send
                    the `ls()` command to be evaluated.

:[range]Rwrite      Given a range, take the text given in [range] and send it
                    to the target R console to be evaluated.

:Rwrite             With neither a range or an argument, send the current line
                    to the target R console to be evaluated.

:Rhelp[args]        Given an R function name as [args], open the R help file
                    for the function given by [args]. The default is to open
                    the 'html' help file, but a text based option is
                    available (see `g:rook_help_type` in |rook-configurations|).
                    The command uses the R `help()` function with the
                    `package` argument set to NULL. To get help for a function
                    in a specific package, you can use the `::` notation;
                    `package::function`. For example, to view the R help file
                    for the `image` function in the `raster` package, use
                    `raster::image`.

:Rhelp              Given no arguments, search backwards from the cursor to
                    find the previous R function call and populate the
                    `help()` function argument using that function. If the
                    cursor is over a function call, that function is used. If
                    the search finds a function call with `::` notation, the
                    package is also supplied to the `help()` call. Tab
                    completion of previously used `:Rhelp` [args] is
                    available.

:Rview[args]        Given an R function as [args], wrap the word under the
                    cursor in the [args] function name and evaluate it in the
                    target R console. For example `:Rview head` will send
                    `head(<cword>)` to be evaluated in R. Tab completion of
                    previously used `:Rview` [args] is available.

:Rview              Given no arguments, the previous function supplied to
                    `:Rview` is used.

:Rdetach            Remove the buffer local target reference.

:Rdetach!           Like `:Rdetach`, but also delete the target terminal
                    buffer (bang has no effect if target is a tmux pane). 
                    The target references for all vim buffers attached to the
                    target will also be removed.

:Rargs[args]        Given an R function name as [args], show the arguments of
                    that function in the target R console using the R `args()`
                    function.

:Rargs              Given no arguments, search backwards from the cursor to
                    find the previous R function call and populate the `name`
                    argument of `args()` using that function. If the cursor is
                    over a function call, that function is used.

:Rdev[args]         Given a function name from the R `devtools` package,
                    evaluate the function in the current R console. Tab
                    completion for select functions is provided.
                    

Rook does not have a built-in command to create a new target R session in
a split. If you want to automate starting and attaching a new target R session
in a split, you can use the `rook#rstart()` function. For example, the
following will create an `:Rstart` command that will create and attach a new
target in a horizontal split below the current buffer:

    if has('nvim') || has('terminal')
        " vim/neovim
        command! Rstart call rook#rstart('belowright 25new')
    else
        " tmux
        command! Rstart call rook#rstart('tmux split-window -v -p 35')
    endif

If the target is a vim/neovim terminal buffer, the argument supplied to the
`rook#rstart()` function should create a new window, e.g., `new`, `vnew`, or
`tabnew`. If the target is tmux, the argument should create a new pane, e.g.,
`split-window`, or `new-window`.


==============================================================================
GLOBAL PLUGIN                                                    *rook-global*

Rook.vim is set up to be a global plugin because R code can appear in numerous
filetypes (e.g., markdown, pandoc, rmd, rnw, latex). This means that the above
commands are available in all vim filetypes. All rook.vim functions are lazy
loaded, so there should be no startup penalty to having rook.vim installed if
you don't use it for certain filetypes.


==============================================================================
MAPPINGS                                                       *rook-mappings*

Rook provides several <Plug> mappings. If you want to send code from a vim
buffer to the selected R console, add the following mappings to your .vimrc:

    xmap gl  <Plug>RookSend      " Send selected text
    nmap gl  <Plug>RookSend      " Send motion/text object
    nmap gll <Plug>RookSendLine  " Send current line

To send the current line, use `gll`. Use `gl` followed by a motion to send the
motion target, e.g., `glip` will send a paragraph. In visual mode, use `gl` to
send the current selection.

Several common plugin actions are available for mapping:

    nmap <leader>rs <Plug>RookSourceFile " Source the current file
    nmap <leader>rw <Plug>RookSetwd      " setwd() to current directory
    nmap <leader>rh <Plug>RookRhelp      " Get help for function under cursor
    nmap <leader>ri <Plug>RookRview      " Interactive Rview call
    xmap <leader>ri <Plug>RookRview      " Interactive Rview call
    nmap <leader>ra <Plug>RookRargs      " Get arguments for function

More generally, if you want key mappings to evaluate frequently used commands
(with path expansion), you can use the `rook#send_text` function. For example,
the following mapping will render the current rmarkdown file in the target R
session:

    nnoremap <silent> <leader>rm :call 
        \ rook#send_text('rmarkdown::render("' . expand('%:p') . '")')<CR>


==============================================================================
TEXT OBJECTS                                               *rook-text-objects*

Text objects for R functions and rmarkdown code chunks are available. The
following <Plug> mappings allow operating on these text objects:

<Plug>RookRFunctionVisual     "a function"
<Plug>RookRFunctionPending    "a function"

<Plug>RookRmdChunkVisualI     "inner chunk"
<Plug>RookRmdChunkPendingI    "inner chunk"
<Plug>RookRmdChunkVisualA     "a chunk"
<Plug>RookRmdChunkPendingA    "a chunk"

To map `af` to send an R function to the attached R session and map `ic` and
`ac` to rmarkdown chunks, add the following to your .vimrc:

    xmap af <Plug>RookRFunctionVisual
    omap af <Plug>RookRFunctionPending
    xmap <buffer> ic <Plug>RookRmdChunkVisualI 
    omap <buffer> ic <Plug>RookRmdChunkPendingI
    xmap <buffer> ac <Plug>RookRmdChunkVisualA 
    omap <buffer> ac <Plug>RookRmdChunkPendingA

To send the R function the cursor is in, use `glaf`. To send all R code in an
rmarkdown chunk use `glic`.

Because rook.vim is defined as a global plugin, the above mappings would be
available in all vim filetypes. If you want mappings to only be created for
certain filetypes, use an |autocommand| in your .vimrc:

    augroup rook_mappings
        autocmd!
        au FileType r,rmd,rnoweb xmap <buffer> af <Plug>RookRFunctionVisual
        au FileType r,rmd,rnoweb omap <buffer> af <Plug>RookRFunctionPending
        au FileType rmd xmap <buffer> ic <Plug>RookRmdChunkVisualI
        au FileType rmd omap <buffer> ic <Plug>RookRmdChunkPendingI
        au FileType rmd xmap <buffer> ac <Plug>RookRmdChunkVisualA
        au FileType rmd omap <buffer> ac <Plug>RookRmdChunkPendingA
    augroup END

The above autocommand limits the function text object mappings to only be set
for `r`, `rmd`, and `rnoweb` filetypes.


==============================================================================
CONFIGURATIONS                                           *rook-configurations*

You can change the following settings to control how Rook works.

------------------------------------------------------------------------------
g:rook_target_type                                            default: 'vim'

By default, if you are using a vim version with the 'terminal' feature or
neovim, rook.vim assumes the target R console is a vim/neovim terminal buffer
(even if vim/neovim is running inside tmux). If you want to use a tmux pane as
the target, set this variable to 'tmux', e.g., put the following in you .vimrc
file:

    let g:rook_target_type = 'tmux'

------------------------------------------------------------------------------
g:rook_tmp_file                          default: file output from tmpname()

Set this to change the location of the temporary file Rook uses to send
commands (needs a full path):

    let g:rook_tmp_file = "/tmp/vim-rook-tmp-file"

------------------------------------------------------------------------------
g:rook_source_send                                                default: 1

When set to 0, sent selections, paragraphs, etc. will be sent line wise, that
is, each line will appear in the selected target R console. This can be slow
if sending a large number of lines. If set to 1 (the default), sent text in
excess of a single line is evaluated using the source() function in R. This is
a much faster way to send large chunks of code, however, the sent code is not
viewable in R.

------------------------------------------------------------------------------
g:rook_rstudio_folding                                            default: 0

When set to 1, code folding imitates RStudio style folding/sections. Three
syntax variants can be used to create a fold; in each variant the marker line
starts with a `#` and ends with four consecutive `#`, `=`, or `-`.

`# syntax 1 ####`
`# syntax 2 ====`
`# syntax 3 ----`

RStudio does not have nested folding, therefore, each of the three different
syntaxes represent a level-1 fold within the file (but see
`g:rook_nest_folds`).

When set, RStudio style folding is limited to buffers with filetype=r. When
this variable is set to 0 (the default) the user defined default folding
method is used.

------------------------------------------------------------------------------
g:rook_nest_folds                                                 default: 0

When set to 1, RStudio style folding is performed in a nested manner. Headers
with trailing `#` are considered level-1 folds, headers with trailing `=` are
considered level-2 folds, and headers with trailing `-` are considered level-1
folds.

`# level 1 ####`
`# level 2 ====`
`# level 3 ----`

The variable `g:rook_rstudio_folding` must be set to 1 for nesting to take
effect.

------------------------------------------------------------------------------
g:rook_help_type                                               default: html

When set to 'html', R help files are opened in html format. Specifically, the
R `help()` function is called with `help_type='html'`.

When set to 'text', the text based R help file is opened from the target R
console, i.e., the R `help()` function is called with `help_type='text'`.

When using html or text based help, the help file is looked up from inside the
attached R console environment, therefore, help for functions available in
that environment can be called without specifying a package.

------------------------------------------------------------------------------
g:rook_auto_attach                                                default: 1

When set to 1, if only one R target is attached, all new vim buffers with file
extensions `*.r,*.R,*.rmd,*.Rmd,*.rnw,*.Rnw` will be auto-attached to the
single existing target. If more than one target is attached, no auto-attaching
occurs. Set to 0 to turn-off off auto-attaching.

------------------------------------------------------------------------------
g:rook_highlight_console                                          default: 1

When set to 1, syntax highlighting of the attached R console is enabled. Set
to 0 to turn-off syntax highlighting of the R console.


==============================================================================
BUGS                                                               *rook-bugs*

If you find a bug, please post it on the issue tracker:
http://github.com/michaelmalick/vim-rook/issues/


==============================================================================
LICENSE                                                         *rook-license*

MIT/X11


vim:tw=78:et:ft=help:norl:nowrap:
